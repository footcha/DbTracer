<!--DBGhost-->
<DBGhost>
  <!--DB Ghost application type.-->
  <ChangeManager>
    <!--Template Database - this is used when a database build is part of the processing.  This database's attributes are used-->
    <!--for the CREATE DATABASE statement at the start of the build.  Generally the target database is used as the template.-->
    <!--TemplateDB-->
    <TemplateDB>
      <DBName>test</DBName>
      <DBServer>STROJ\CZPRG3K10_DEV1</DBServer>
      <DBUserName />
      <DBPassword />
      <AuthenticationMode>Windows</AuthenticationMode>
    </TemplateDB>
    <!--Source Database-->
    <!--SourceDB-->
    <SourceDB>
      <DBName>test_20100123012328</DBName>
      <DBServer>STROJ\CZPRG3K10_DEV1</DBServer>
      <DBUserName />
      <DBPassword />
      <AuthenticationMode>Windows</AuthenticationMode>
    </SourceDB>
    <!--Target Database-->
    <!--TargetDB-->
    <TargetDB>
      <DBName>test</DBName>
      <DBServer>STROJ\CZPRG3K10_DEV1</DBServer>
      <DBUserName />
      <DBPassword />
      <AuthenticationMode>Windows</AuthenticationMode>
    </TargetDB>
    <!--ChangeManagerProcessType is a value which tells us what task is executed.-->
    <!--ScriptDatabase - Scripts a database to files.-->
    <!--ScriptDatabaseAndBuildDatabase - Scripts a database to files and builds a database.-->
    <!--ScriptDatabaseAndBuildDatabaseAndCompare - Scripts a database to files and builds the source database and checks the target database for differences.-->
    <!--ScriptDatabaseAndBuildDatabaseAndCompareAndCreateDelta - Scripts a database to files and builds the source database and checks the target database for differences, creating a SQL Delta of the differences.-->
    <!--ScriptDatabaseAndBuildDatabaseAndCompareAndSynchronize - Scripts a database to files and builds the source database and looks for differences and synchronizes the target database with the newly built database-->
    <!--BuildDatabase - Builds a database, BuildDatabaseAndCompare - Builds the source database and checks the target database for differences, BuildDatabaseAndCompareAndSynchronize - builds the source database and looks for differences and synchronizes the target database with the newly built database.-->
    <!--CompareOnly - Looks for differences, CompareAndSynchronize - Looks for differences and synchronizes the target database with the source database.-->
    <!--CompareAndCreateDelta - Looks for differences and creates a SQL Delta of the differences, BuildDatabaseAndCompareAndCreateDelta - Builds the source database and checks the target database for differences, creating a SQL Delta of the differences.-->
    <!--CopyDatabase - Creates a copy of a database on a server.-->
    <ChangeManagerProcessType>ScriptDatabaseAndBuildDatabaseAndCompareAndCreateDelta</ChangeManagerProcessType>
    <!--Set this to true to enable DB Ghost to select all those tables that contain data so a data comparison is performed, this is useful when using a database created from scripts where the only user data is data that needs to be compared.-->
    <DynamicallySelectTablesForDataCheck>True</DynamicallySelectTablesForDataCheck>
    <!--A list of tables to do data comparisons against, used only when doing a Comparison between two existing databases.-->
    <!--This list is ignored if the DynamicallySelectTablesForDataCheck property is set to true.-->
    <StaticDataTables />
    <!--Boolean to indicate if source is located in source control.-->
    <UseSourceControl>False</UseSourceControl>
    <!--Connection Settings for source control.-->
    <SourceControlSettings>
      <Username />
      <Password />
      <DatabaseIni />
      <GetLatest />
      <!--VersionLabel is ignored if GetLatest is set to true.-->
      <VersionLabel />
    </SourceControlSettings>
    <BuildDBName>test_20100123012328</BuildDBName>
    <!--Visual Studio Database Project File - SQL object directories are derived from this project if it exists.-->
    <VisualStudioDatabaseProjectFile>C:\Documents and Settings\footcha\Dokumenty\Corel User Files\test.dbp</VisualStudioDatabaseProjectFile>
    <!--Directory containing SQL Objects for the Build-->
    <SchemaScripts>
      <DeriveRootDirectoryFromSettingsFileLocation>False</DeriveRootDirectoryFromSettingsFileLocation>
      <RootDirectory>C:\Documents and Settings\footcha\Dokumenty\Corel User Files</RootDirectory>
      <!--DropCreateDatabaseScript - the location of a SQL script that has definitions for the database properties including the CREATE DATABASE statement.-->
      <!--Leave or set this to an empty string if you need to use an existing database as the source for all the build database properties.-->
      <DropCreateDatabaseScript />
      <Logins>
        <Path>.\Logins</Path>
      </Logins>
      <UsersAndRoles>
        <Path>.\Users</Path>
        <Path>.\Roles</Path>
        <Path>.\Application Roles</Path>
      </UsersAndRoles>
      <Defaults>
        <Path>.\Defaults</Path>
      </Defaults>
      <Rules>
        <Path>.\Rules</Path>
      </Rules>
      <UDDT>
        <Path>.\User Defined Data Types</Path>
        <Path>.\User Defined Types</Path>
      </UDDT>
      <Tables>
        <Path>.\Tables</Path>
      </Tables>
      <Views>
        <Path>.\Views</Path>
      </Views>
      <UDFs>
        <Path>.\User Defined Functions</Path>
      </UDFs>
      <StoredProcedures>
        <Path>.\Stored Procedures</Path>
      </StoredProcedures>
      <Triggers>
        <Path>.\Triggers</Path>
      </Triggers>
      <StaticData>
        <Path>.\Static Data</Path>
      </StaticData>
      <XMLSchemaCollections>
        <Path>.\XML Schema Collections</Path>
      </XMLSchemaCollections>
      <Schemas>
        <Path>.\Schemas</Path>
      </Schemas>
      <Assemblies>
        <Path>.\Assemblies</Path>
      </Assemblies>
      <DDLTriggers>
        <Path>.\DDL Triggers</Path>
      </DDLTriggers>
      <ServiceBrokerMessageTypes>
        <Path>.\Message Types</Path>
      </ServiceBrokerMessageTypes>
      <ServiceBrokerContracts>
        <Path>.\Service Contracts</Path>
      </ServiceBrokerContracts>
      <ServiceBrokerQueues>
        <Path>.\Service Queues</Path>
      </ServiceBrokerQueues>
      <ServiceBrokerRoutes>
        <Path>.\Service Routes</Path>
      </ServiceBrokerRoutes>
      <ServiceBrokerServices>
        <Path>.\Broker Services</Path>
      </ServiceBrokerServices>
      <ServiceBrokerRemoteServiceBindings>
        <Path>.\Remote Service Bindings</Path>
      </ServiceBrokerRemoteServiceBindings>
      <AggregateFunctions>
        <Path>.\Aggregate Functions</Path>
      </AggregateFunctions>
      <AsymmetricKeys />
      <Certificates />
      <FullTextCatalogs>
        <Path>.\Full Text Catalogs</Path>
      </FullTextCatalogs>
      <PartitionFunctionsAndSchemes>
        <Path>.\Partition Schemes</Path>
        <Path>.\Partition Functions</Path>
      </PartitionFunctionsAndSchemes>
      <SymmetricKeys />
      <Synonyms>
        <Path>.\Synonyms</Path>
      </Synonyms>
      <!--The following nodes are for custom scripts. AfterScript, BeforeSyncScript, AfterSyncScript-->
      <!--The scripts in the AfterBuildScript node are run on the build source database after all other scripts have run.-->
      <AfterBuildScript />
      <!--The scripts in the BeforeSyncScript node are run on the target database before synchronization takes place.-->
      <BeforeSyncScript />
      <!--The scripts in the AfterSyncScript node are run on the target database after synchronization takes place.-->
      <AfterSyncScript />
    </SchemaScripts>
    <!--Comparison Options-->
    <CompareOptions>
      <DifferencesWithObjects>True</DifferencesWithObjects>
      <DuplicatedObjects>True</DuplicatedObjects>
      <ExtraObjects>True</ExtraObjects>
      <DoNotDropTables>False</DoNotDropTables>
      <DoNotDropColumns>False</DoNotDropColumns>
      <!--DetectPotentialColumnRenames - comments.-->
      <!--Execute - when this attribute is true, the detection and renaming process can run.-->
      <!--UseExactMatch - when this attribute is true, the columns must be exactly the same except for name.-->
      <!--RaiseErrors - when this attribute is true, the process will return errors when potential column renames are detected and you are creating a change script or synchronizing the target database - otherwise warnings are returned.-->
      <!--StopOnError - when this attribute is true, the process will stop if all the following conditions are true.-->
      <!--              You are creating a change script or synchronizing the target database; RaiseErrors=true.-->
      <DetectPotentialColumnRenames Execute="False" UseExactMatch="False" RaiseErrors="False" StopOnError="False">
        <!--Renaming of columns only happens when Execute is true and creating a change script or synchronizing the target database.-->
        <!--A column rename will only happen if the old column exists and the new column does not exist.-->
        <!--Example column to rename: <ColumnToRename Schema="dbo" TableName="aTable" OldColumnName="oldcolname" NewColumnName="newcolname" />-->
      </DetectPotentialColumnRenames>
      <MissingObjects>True</MissingObjects>
      <DisableForeignKeys>False</DisableForeignKeys>
      <FireTriggers>False</FireTriggers>
      <IgnoreCollationDifferences>True</IgnoreCollationDifferences>
      <QuestionEachChange>False</QuestionEachChange>
      <Permissions>True</Permissions>
      <ColumnOrdinal>True</ColumnOrdinal>
      <ExtendedProperties>True</ExtendedProperties>
      <DynamicallyAssignDatabaseName>True</DynamicallyAssignDatabaseName>
      <KeepNewDatabase>True</KeepNewDatabase>
      <DropDBIfExistsForCpyDB>False</DropDBIfExistsForCpyDB>
      <ContinueOnBuildBreak>False</ContinueOnBuildBreak>
      <EnableCustomScripts>False</EnableCustomScripts>
      <LoadAllFileTypes>True</LoadAllFileTypes>
      <FileTypes />
      <!--The following value is ignored if running from the command line.-->
      <RequestApplicationRolePassword>True</RequestApplicationRolePassword>
      <SQLObjectsOptions>
        <StaticData>True</StaticData>
        <Logins>True</Logins>
        <Schemas>True</Schemas>
        <UsersAndRoles>True</UsersAndRoles>
        <Defaults>True</Defaults>
        <Rules>True</Rules>
        <UDDT>True</UDDT>
        <Tables>True</Tables>
        <Triggers>True</Triggers>
        <Views>True</Views>
        <StoredProcs>True</StoredProcs>
        <UDFs>True</UDFs>
        <Assemblies>True</Assemblies>
        <XMLSchemaCollections>True</XMLSchemaCollections>
        <DDLTriggers>True</DDLTriggers>
        <ServiceBrokerMessageTypes>True</ServiceBrokerMessageTypes>
        <ServiceBrokerContracts>True</ServiceBrokerContracts>
        <ServiceBrokerQueues>True</ServiceBrokerQueues>
        <ServiceBrokerServices>True</ServiceBrokerServices>
        <ServiceBrokerRoutes>True</ServiceBrokerRoutes>
        <ServiceBrokerRemoteServiceBindings>True</ServiceBrokerRemoteServiceBindings>
        <Synonyms>True</Synonyms>
        <PartitionFunctionsAndSchemes>True</PartitionFunctionsAndSchemes>
        <AggregateFunctions>True</AggregateFunctions>
        <AsymmetricKeys>False</AsymmetricKeys>
        <Certificates>False</Certificates>
        <SymmetricKeys>False</SymmetricKeys>
        <FullTextCatalogs>True</FullTextCatalogs>
      </SQLObjectsOptions>
    </CompareOptions>
    <!--The fullname for the Build File, if not provided no Build SQL file will be created-->
    <BuildSQLFileName>C:\Documents and Settings\footcha\Dokumenty\DBGhost_Build.sql</BuildSQLFileName>
    <!--The fullname for the Delta Script File, if not provided none will be created-->
    <DeltaScriptsFileName>C:\Documents and Settings\footcha\Dokumenty\DBGhost_Delta.sql</DeltaScriptsFileName>
    <DeltaFileEncoding>Unicode</DeltaFileEncoding>
    <!--The fullname for the ReportFile, if not provided none will be created-->
    <ReportFileName>C:\Documents and Settings\footcha\Dokumenty\DBGhost_Process.log</ReportFileName>
    <!--Set the value to true to have the file overwritten each time the process runs-->
    <OverwriteReportFileIfExists>False</OverwriteReportFileIfExists>
    <!--The last session file save path-->
    <SavePath>C:\Documents and Settings\footcha\Dokumenty\DBGhostChangeManagerSettings.dbgcm</SavePath>
    <!--Internally used node-->
    <TempUniqueKey>633998052720781250</TempUniqueKey>
  </ChangeManager>
  <Scripter>
    <!--DB Ghost application - Do not edit-->
    <ApplicationName>Scripter</ApplicationName>
    <!--Details of the database to be scripted out-->
    <DatabaseToScript>
      <!--The ServerType value must be SQLServer7, SQLServer2000, SQLServer2005 or SQLServer2008-->
      <ServerType>Unknown</ServerType>
      <Server>STROJ\CZPRG3K10_DEV1</Server>
      <Database>test</Database>
      <Username />
      <Password />
      <IncludeDropAndCreateDatabaseStatements>False</IncludeDropAndCreateDatabaseStatements>
    </DatabaseToScript>
    <!--SQL object filter criteria-->
    <ObjectFilter>
      <TypeFilter>.*</TypeFilter>
      <SchemaFilter>.*</SchemaFilter>
      <NameFilter>.*</NameFilter>
      <Invert>False</Invert>
    </ObjectFilter>
    <!--Encoding to be used for object scripts-->
    <FileEncodingForObjects>Unicode</FileEncodingForObjects>
    <!--Table filter criteria-->
    <TableFilter>
      <!--Scope can be ScriptAllTables, ScriptFilteredTables, ScriptSelectedTables or DoNotScriptTables-->
      <scope>DoNotScriptTables</scope>
      <schemafilter>.*</schemafilter>
      <namefilter>.*</namefilter>
      <invert>False</invert>
      <minrows>1</minrows>
      <maxrows>999999999999</maxrows>
      <tablestoscript />
    </TableFilter>
    <!--Encoding to be used for data scripts-->
    <FileEncodingForData>Unicode</FileEncodingForData>
    <!--The size of each batch of rows in a static data/lookup script-->
    <DataBatchSize>100</DataBatchSize>
    <!--Flag to indication the use of the collate clause in table creation scripts-->
    <IncludeCollations>false</IncludeCollations>
    <!--Flag to indicate if permissions are scripted with the objects-->
    <IncludePermissions>false</IncludePermissions>
    <!--Target root folder for the SQL scripts-->
    <OutputFolder>C:\Documents and Settings\footcha\Dokumenty\Corel User Files</OutputFolder>
    <!--Options to delete output folders-->
    <!--DeleteAll - this option will delete all the object directories below the root output directory.-->
    <!--DeleteByObject - this option will delete only those directories where you are scripting objects. For example if you are only scripting Stored Procedures then only the Stored Procedures directory will be deleted.-->
    <!--DeleteNothing - this option will not delete any directories.-->
    <OutputFolderOption>DeleteNothing</OutputFolderOption>
    <!--Flag to indicate that a Visual Studio database project file should be created-->
    <CreateVSProject>true</CreateVSProject>
    <!--The name of the log/report file-->
    <ReportFilename />
    <!--Overwrite log/report file if it exists.-->
    <OverwriteReportFilename>False</OverwriteReportFilename>
  </Scripter>
</DBGhost>